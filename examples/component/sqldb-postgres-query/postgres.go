//go:generate go run go.bytecodealliance.org/cmd/wit-bindgen-go generate --world component --out gen ./wit
package main

import (
	"fmt"
	"sqldb-postgres-query/gen/wasmcloud/examples/invoke"
	"sqldb-postgres-query/gen/wasmcloud/postgres/query"
	"sqldb-postgres-query/gen/wasmcloud/postgres/types"

	"go.bytecodealliance.org/cm"
	"go.wasmcloud.dev/component/log/wasilog"
)

const CreateTableQuery = `
CREATE TABLE IF NOT EXISTS example (
	id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	description text NOT NULL,
	created_at timestamptz NOT NULL DEFAULT NOW()
);
`

// A basic insert query, using Postgres `RETURNING` syntax,
// which returns the contents of the row that was inserted
const InsertQuery = `
INSERT INTO example (description) VALUES ($1) RETURNING *;
`

const SelectQuery = `
SELECT * FROM example WHERE description = $1;
`

func init() {
	invoke.Exports.Call = call
}

func call() string {
	logger := wasilog.ContextLogger("call")

	query := Query(CreateTableQuery)
	if query.IsErr() {
		logger.Error("failed to create table", "err", query.Err())
		return fmt.Sprintf("ERROR: failed to create table: %v", query.Err())
	}

	val := "inserted example go row!"
	insertResult := Query(InsertQuery, types.PgValueText(val))
	if insertResult.IsErr() {
		logger.Error("failed to insert row", "err", insertResult.Err())
		return fmt.Sprintf("ERROR: failed to insert row: %v", insertResult.Err())
	}

	selectResult := Query(SelectQuery, types.PgValueText(val))
	if selectResult.IsErr() {
		logger.Error("failed to select rows", "err", selectResult.Err())
		return fmt.Sprintf("ERROR: failed to select rows: %v", selectResult.Err())
	}
	selectedRows := selectResult.OK().Slice()
	if len(selectedRows) == 0 {
		logger.Error("failed to retrieve inserted row")
		return "ERROR: failed to retrieve inserted row"
	}

	firstRow := selectedRows[0]
	fields := firstRow.Slice()
	logger.Info("first row", "id", *fields[0].Value.Int8(), "description", string(*fields[1].Value.Text()), "created_at", formatTimestamp(fields[2].Value))
	return fmt.Sprintf("SUCCESS: we selected a row! %v", firstRow)
}

// Helper function to assist with readability in the example when querying the database
func Query(stmt string, params ...types.PgValue) cm.Result[query.QueryErrorShape, cm.List[types.ResultRow], types.QueryError] {
	return query.Query(stmt, cm.ToList(params))
}

func formatTimestamp(t types.PgValue) string {
	if t.TimestampTz() != nil {
		ts := t.TimestampTz()
		date := ts.Timestamp.Date.Ymd()
		time := ts.Timestamp.Time
		return fmt.Sprintf("%02d-%02d-%02dT%02d:%02d:%02dZ", date.F0, date.F1, date.F2, time.Hour, time.Min, time.Sec)
	}
	return ""
}

func main() {}
